/*
 * Copyright (c) 2011 Salzburg Research.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'osgi'

// the configuration of this module (used for the POM and the MANIFEST)
def pomConfig = [
    name: "LD-Path API ",
    description: "LD Path is a simple path-based query language similar to XPath "
        + "or SPARQL Property Paths that is particularly well-suited for querying "
        + "and retrieving resources from the Linked Data Cloud by following RDF "
        + "links between resources and servers.",
    packaging: "bundle"] as Map;


// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}

jar { //add OSGI metadata
    manifest { // the manifest of the default jar is of type OsgiManifest
        name = pomConfig['name']
        instruction 'Export-Package',
              "at.newmedialab.ldpath.api;version="+version,
              "at.newmedialab.ldpath.api.backend;version="+version,
              "at.newmedialab.ldpath.api.functions;version="+version,
              "at.newmedialab.ldpath.api.selectors;version="+version,
              "at.newmedialab.ldpath.api.tests;version="+version,
              "at.newmedialab.ldpath.api.transformers;version="+version
        instruction 'Bundle-Vendor', 'Salzburg Research'
        instruction 'Bundle-Category', 'LD-Path'
        instruction 'Bundle-Description', pomConfig['description']
        instruction 'Bundle-DocURL', 'http://code.google.com/p/ldpath/'
        instruction 'Bundle-License', 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
}
//ensure that the license is added
task copyLicense(type:Copy) {
    from 'LICENSE'
    into 'build/classes/main/META-INF'
}
jar.dependsOn copyLicense

install { //remove test dependencies
    repositories['mavenInstaller'].with {
        configurePom(pom,pomConfig)
        beforeDeployment { MavenDeployment deployment ->
            println "Pubished Artifacts: "
            deployment.artifacts.each{ PublishArtifact artifact ->
                println " > name: " + artifact.name + " | file: " + artifact.file +
                    " | type: "+artifact.type + " | ext: " + artifact.extension +
                    " | classifier " + artifact.classifier;
            }
            //signing deactivated for now!
   //            signPom(deployment)
        }
    }
}

uploadArchives { //remove test dependencies and ldpath-core
    repositories['mavenDeployer'].with {
        beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: 'dummy', password: 'dummy')
        }
        configurePom(pom,pomConfig)
    }
}


project(':') {
    dependencies {
        runtime project('ldpath-api')
        testCompile project('ldpath-api')
    }
}
